}
## concatenate
combined_data_family <- do.call(rbind, data_list_family)
spcList <- combined_data_family %>%
select(VALID_NAME) %>%
distinct()
write.csv(spcList, "spcList.csv")
### Number of species per family
spc_par_fam <- combined_data_family %>%
group_by(FAMILY) %>%
summarise(nb_par_fam = n_distinct(VALID_NAME))
### Completeness of traits for families
CPTD_fam <- left_join(spc_par_fam, nb_spc_familles, by = "FAMILY") %>%
mutate(percentage=round(nb_par_fam/nb_spc_familles*100,2))
write.csv(CPTD_fam, file="CPTD_fam.csv")
### Calculation of number of species per family and trait ----
nb_spc_famille_trait <- combined_data_family %>%
group_by(FAMILY, source_file) %>%
summarize(nb_spc =n_distinct(VALID_NAME))
nb_spc_famille_trait <- left_join(nb_spc_famille_trait, nbSpcFam, by="FAMILY") %>%
mutate(proportion=round(nb_spc / nbSpc*100,2))
nbSpcFamTraitWide <- nb_spc_famille_trait %>%
select(FAMILY, source_file, nb_spc) %>%
pivot_wider(names_from = FAMILY, values_from = nb_spc) %>%
mutate_all(~ replace_na(., 0)) %>%
mutate(Total = rowSums(across(where(is.numeric))))
write.csv(nbSpcFamTraitWide, file="nbSpcFamTraitWide.csv")
### Percentage of species by family and trait ----
propSpcFamTraitWide <- nb_spc_famille_trait %>%
select(FAMILY, source_file, proportion) %>%
pivot_wider(names_from = FAMILY, values_from = proportion) %>%
mutate_all(~ replace_na(., 0))
write.csv(propSpcFamTraitWide, file="propSpcFamTraitWide.csv")
### radar chart for family by trait
propSpcFamTraitWideRadar <- propSpcFamTraitWide %>%
rename("groups" = "source_file")
palette_traits <- c("Body length" = "#c9211e",
"ITD" ="#900C3F",
"Tongue length"="#C70039",
"Wing length" ="#FF4500",
"Dry mass" ="#FF5733",
"Hair length" ="#ff967b",
"Phenology" ="#1b4f72",
"Voltinism"="#2874a6",
"Sociality" = "#3498db",
"Lectism" ="#145a32",
"Pollination" ="#229954",
"Parasitism" = "#27ae60",
"Nesting" ="#7dcea0",
"Foraging distance" = "#9fe977",
"Biogeographical status" ="#f6dd57",
"Altitude" ="#FF8C00",
"Ecological affinity"="#0b5345",
"IUCN Status"="#935116",
"Habitat" ="#ffc107")
## Radar Altitude
radarAltitudeFam <- ggradar(
propSpcFamTraitWideRadar %>% filter(groups=="BeeFuncAltitude.csv"),
values.radar = c("0", "50", "100"),
grid.min = 0, grid.mid = 50, grid.max = 100,
group.line.width = 1,
group.point.size = 3,
group.colours = "#FF8C00",
background.circle.colour = "white",
fill=TRUE,
gridline.mid.colour = "grey",
axis.label.size=8
)
## Radar Biogeographic status
radarBiogeoStatusFam <- ggradar(
propSpcFamTraitWideRadar %>% filter(groups == "BeeFuncBiogeographicalStatus.csv"),
values.radar = c("0", "50", "100"),
grid.min = 0, grid.mid = 50, grid.max = 100,
group.line.width = 1,
group.point.size = 3,
group.colours = "#FFD700",
background.circle.colour = "white",
fill=TRUE,
gridline.mid.colour = "grey",
axis.label.size=8
)
## Radar BodyLength
radarBodyLengthFam <- ggradar(
propSpcFamTraitWideRadar %>% filter(groups == "BeeFuncBodyLength.csv"),
values.radar = c("0", "50", "100"),
grid.min = 0, grid.mid = 50, grid.max = 100,
group.line.width = 1,
group.point.size = 3,
group.colours = "#c9211e",
background.circle.colour = "white",
fill=TRUE,
gridline.mid.colour = "grey",
axis.label.size=8
)
## Radar EcologicalAffinity
radarEcologicalAffinityFam <- ggradar(
propSpcFamTraitWideRadar %>% filter(groups=="BeeFuncEcologicalAffinity.csv"),
values.radar = c("0", "50", "100"),
grid.min = 0, grid.mid = 50, grid.max = 100,
group.line.width = 1,
group.point.size = 3,
group.colours = "#0b5345",
background.circle.colour = "white",
fill=TRUE,
gridline.mid.colour = "grey",
axis.label.size=8
)
## Radar ITD
radarITDFam <- ggradar(
propSpcFamTraitWideRadar %>% filter(groups == "BeeFuncITD.csv"),
values.radar = c("0", "50", "100"),
grid.min = 0, grid.mid = 50, grid.max = 100,
group.line.width = 1,
group.point.size = 3,
group.colours = "#900C3F",
background.circle.colour = "white",
fill=TRUE,
gridline.mid.colour = "grey",
axis.label.size=8)
## Radar IUCN STATUS
radarIUCNStatusFam <- ggradar(
propSpcFamTraitWideRadar %>% filter(groups=="BeeFuncIUCNStatus.csv"),
values.radar = c("0", "50", "100"),
grid.min = 0, grid.mid = 50, grid.max = 100,
group.line.width = 1,
group.point.size = 3,
group.colours = "#935116",
background.circle.colour = "white",
fill=TRUE,
gridline.mid.colour = "grey",
axis.label.size=8)
## Radar Lectism
radarLectismFam <- ggradar(
propSpcFamTraitWideRadar %>% filter(groups == "BeeFuncLectism.csv"),
values.radar = c("0", "50", "100"),
grid.min = 0, grid.mid = 50, grid.max = 100,
group.line.width = 1,
group.point.size = 3,
group.colours = "#145a32",
background.circle.colour = "white",
fill=TRUE,
gridline.mid.colour = "grey",
axis.label.size=8)
## Radar Parasitism
radarParasitismFam <- ggradar(
propSpcFamTraitWideRadar %>% filter(groups == "BeeFuncParasitism.csv"),
values.radar = c("0", "50", "100"),
grid.min = 0, grid.mid = 50, grid.max = 100,
group.line.width = 1,
group.point.size = 3,
group.colours = "#27ae60",
background.circle.colour = "white",
fill=TRUE,
gridline.mid.colour = "grey",
axis.label.size=8)
## Radar Phenology
radarPhenologyFam <- ggradar(
propSpcFamTraitWideRadar %>% filter(groups == "BeeFuncPhenology.csv"),
values.radar = c("0", "50", "100"),
grid.min = 0, grid.mid = 50, grid.max = 100,
group.line.width = 1,
group.point.size = 3,
group.colours = "#1b4f72",
background.circle.colour = "white",
fill=TRUE,
gridline.mid.colour = "grey",
axis.label.size=8)
## Radar Pollination
radarPollinationFam <- ggradar(
propSpcFamTraitWideRadar %>% filter(groups == "BeeFuncPollination.csv"),
values.radar = c("0", "50", "100"),
grid.min = 0, grid.mid = 50, grid.max = 100,
group.line.width = 1,
group.point.size = 3,
group.colours = "#229954",
background.circle.colour = "white",
fill=TRUE,
gridline.mid.colour = "grey",
axis.label.size=8)
## Radar Sociality
radarSocialityFam <- ggradar(
propSpcFamTraitWideRadar %>% filter(groups=="BeeFuncSociality.csv"),
values.radar = c("0", "50", "100"),
grid.min = 0, grid.mid = 50, grid.max = 100,
group.line.width = 1,
group.point.size = 3,
group.colours = "#3498db",
background.circle.colour = "white",
fill=TRUE,
gridline.mid.colour = "grey",
axis.label.size=8)
## Radar Voltinism
radarVoltinismFam <- ggradar(
propSpcFamTraitWideRadar %>% filter(groups=="BeeFuncVoltinism.csv"),
values.radar = c("0", "50", "100"),
grid.min = 0, grid.mid = 50, grid.max = 100,
group.line.width = 1,
group.point.size = 3,
group.colours = "#2874a6",
background.circle.colour = "white",
fill=TRUE,
gridline.mid.colour = "grey",
axis.label.size=8)
## Radar TongueLength
radarTongueLengthFam <- ggradar(
propSpcFamTraitWideRadar %>% filter(groups=="BeeFuncTongueLength.csv"),
values.radar = c("0", "50", "100"),
grid.min = 0, grid.mid = 50, grid.max = 100,
group.line.width = 1,
group.point.size = 3,
group.colours = "#C70039",
background.circle.colour = "white",
fill=TRUE,
gridline.mid.colour = "grey",
axis.label.size=8)
## Radar Habitat
radarHabitat <- ggradar(
propSpcFamTraitWideRadar %>% filter(groups=="BeeFuncHabitat.csv"),
values.radar = c("0", "50", "100"),
grid.min = 0, grid.mid = 50, grid.max = 100,
group.line.width = 1,
group.point.size = 3,
group.colours = "#ffc107",
background.circle.colour = "white",
fill=TRUE,
gridline.mid.colour = "grey",
axis.label.size=8)
radarAltitudeFam
radarBiogeoStatusFam
radarBodyLengthFam
radarEcologicalAffinityFam
radarITDFam
radarIUCNStatusFam
radarLectismFam
radarParasitismFam
radarPhenologyFam
radarPollinationFam
radarSocialityFam
radarVoltinismFam
radarTongueLengthFam
radarHabitat
##For nesting
### Create a file ----
### Creation of a function to extract the data
nesting <- list.files(pattern="^BeeFuncNest.*\\.csv$")
##storage list
data_list_nesting <- list()
##loop to retrieve columns from all files
for (file in nesting) {
data <- read.csv2(file)
data_subset <- data %>%
select(VALID_NAME, FAMILY) %>%
distinct()
if (nrow(data_subset) > 0) {
data_subset$source_file <- basename(file)
data_list_nesting[[length(data_list_nesting) + 1]] <- data_subset
}
}
## concatenate
combined_data_nesting <- do.call(rbind, data_list_nesting)
### Number of species per family
spc_par_nesting <- combined_data_nesting %>%
group_by(FAMILY) %>%
summarise(nb_par_fam = n_distinct(VALID_NAME))
### Completeness of traitfor families
CPTD_nesting <- left_join(spc_par_nesting, nb_spc_familles, by = "FAMILY") %>%
mutate(percentage=round(nb_par_fam/nb_spc_familles*100,2))
write.csv(CPTD_nesting, file="CPTD_nesting.csv")
### Calculation of number of species per family and trait ----
nb_spc_famille_nesting <- combined_data_nesting %>%
group_by(FAMILY, source_file) %>%
summarize(nb_spc =n_distinct(VALID_NAME))
nb_spc_famille_nesting <- left_join(nb_spc_famille_nesting, nbSpcFam, by="FAMILY") %>%
mutate(proportion=round(nb_spc / nbSpc*100,2))
nbSpcFamNestingWide <- nb_spc_famille_nesting %>%
select(FAMILY, source_file, nb_spc) %>%
pivot_wider(names_from = FAMILY, values_from = nb_spc) %>%
mutate_all(~ replace_na(., 0)) %>%
mutate(Total = rowSums(across(where(is.numeric))))
write.csv(nbSpcFamNestingWide, file="nbSpcFamNestingWide.csv")
### Percentage of species by family and trait ----
propSpcFamNestingtWide <- nb_spc_famille_trait %>%
select(FAMILY, source_file, proportion) %>%
pivot_wider(names_from = FAMILY, values_from = proportion) %>%
mutate_all(~ replace_na(., 0))
write.csv(propSpcFamNestingtWide, file="propSpcFamNestingtWide.csv")
##radar chart
CPTDNestingRadar <- CPTD_nesting %>%
select(FAMILY, percentage) %>%
pivot_wider(names_from = FAMILY, values_from = percentage) %>%
mutate(across(everything(), as.numeric)) %>%
mutate(groups = "nesting") %>%
select(groups, Andrenidae, Apidae, Colletidae, Halictidae, Megachilidae, Melittidae)
radarNestingFam <- ggradar(
CPTDNestingRadar,
values.radar = c("0", "50", "100"),
grid.min = 0, grid.mid = 50, grid.max = 100,
group.line.width = 1,
group.point.size = 3,
group.colours = "#7dcea0",
background.circle.colour = "white",
fill=TRUE,
gridline.mid.colour = "grey",
axis.label.size=8)
radarNestingFam
### COMPLETENESS OF GENERA
### GENERA ----
# Nombre d'espèces par genre
nbSpcGen <- CLFrance %>%
group_by(GENUS) %>%
mutate(nbSpc = n()) %>%
select(GENUS, nbSpc) %>%
distinct() %>%
ungroup()
### Create a file ----
### Creation of a function to extract the data
filesGen <- list.files(pattern ="^BeeFunc.*\\.csv$", full.names = TRUE)
##liste de stockage
data_list_genus <- list()
##loop to retrieve columns from all files
for (file in filesGen) {
data <- read.csv2(file)
data_subset <- data %>%
select(VALID_NAME, GENUS) %>%
distinct()
if (nrow(data_subset) > 0) {
data_subset$source_file <- basename(file)
data_list_genus[[length(data_list_genus) + 1]] <- data_subset
}
}
## concatenate
combined_data_genus <- do.call(rbind, data_list_genus)
write.csv(combined_data_genus, "combined_data_genus.csv")
### Number of species per genus
spc_par_gen <- combined_data_genus %>%
select(VALID_NAME, GENUS) %>%
distinct() %>%
group_by(GENUS) %>%
mutate(nbSpcGen = n()) %>%
ungroup()
### Trait completeness for genera
CPTD_gen <- left_join(spc_par_gen, nb_spc_genres, by = "GENUS") %>%
mutate(percentage=round(nbSpcGen/nb_spc_genres*100,2)) %>%
select(GENUS, nbSpcGen, nb_spc_genres, percentage) %>%
distinct()
write.csv(CPTD_gen, "CPTD_gen.csv")
### Calculation of number of species per genus and trait ----
nb_spc_genre_trait <- combined_data_genus %>%
group_by(GENUS, source_file) %>%
summarize(nb_spc =n_distinct(VALID_NAME))
nb_spc_genre_trait <- left_join(nb_spc_genre_trait, nbSpcGen, by="GENUS") %>%
mutate(proportion=round(nb_spc / nbSpc*100,2))
nbSpcGenTraitWide <- nb_spc_genre_trait %>%
select(GENUS, source_file, nb_spc) %>%
pivot_wider(names_from = source_file, values_from = nb_spc) %>%
mutate_all(~ replace_na(., 0)) %>%
mutate(Total = rowSums(across(where(is.numeric))))
write.csv(nbSpcGenTraitWide, file="nbSpcGenTraitWide.csv")
### Percentage of species by family and trait ----
propSpcGenTraitWide <- nb_spc_genre_trait %>%
select(GENUS, source_file, proportion) %>%
pivot_wider(names_from = source_file, values_from = proportion) %>%
mutate_all(~ replace_na(., 0))
write.csv(propSpcGenTraitWide, file="propSpcGenTraitWide.csv")
### TOTAL COMPLETENESS OF THE DATABASE
beeFuncFiles <- list.files(pattern ="^BeeFunc.*\\.csv$", full.names = TRUE)
totalInformation <- beeFuncFiles %>%
map_dfr(~ read.csv2(.x, colClasses = "character") %>%
mutate(source_file = basename(.x))) %>%
select(VALID_NAME, FAMILY, GENUS, source_file)
nbTotalInformation <- nrow(totalInformation)
uniqueSpcTrait <- totalInformation %>%
select(VALID_NAME, source_file) %>%
distinct() %>%
nrow()
totalCompleteness <- round(uniqueSpcTrait/(983*20)*100,2)
write.csv(totalCompleteness, "totalCompleteness.csv")
write.csv(totalInformation, "totalInformation.csv")
nbSpcBeeFunc <- totalInformation %>%
select(VALID_NAME) %>%
distinct() %>%
nrow()
write.csv(nbSpcBeeFunc, "nbSpcBeeFunc.csv")
nbInfoAndrenidae <- totalInformation %>%
filter(FAMILY == "Andrenidae") %>%
distinct() %>%
nrow()
nbInfoApidae <- totalInformation %>%
filter(FAMILY == "Apidae") %>%
distinct() %>%
nrow()
nbInfoColletidae <- totalInformation %>%
filter(FAMILY == "Colletidae") %>%
distinct() %>%
nrow()
nbInfoHalictidae <- totalInformation %>%
filter(FAMILY == "Halictidae") %>%
distinct() %>%
nrow()
nbInfoMegachilidae <- totalInformation %>%
filter(FAMILY == "Megachilidae") %>%
distinct() %>%
nrow()
nbInfoMelittidae <- totalInformation %>%
filter(FAMILY == "Melittidae") %>%
distinct() %>%
nrow()
completenessAndrenidae <- round(nbInfoAndrenidae/(20*194)*100,2)
completenessApidae <- round(nbInfoApidae/(20*287)*100,2)
completenessColletidae <- round(nbInfoColletidae/(20*83)*100,2)
completenessHalictidae <- round(nbInfoHalictidae/(20*186)*100,2)
completenessMegachilidae <- round(nbInfoMegachilidae/(20*209)*100,2)
completenessMelittidae <- round(nbInfoMelittidae/(20*17)*100,2)
Families <- c("Andrenidae", "Apidae", "Colletidae", "Halictidae", "Megachilidae", "Melittidae")
completenessFamiliesList <- c(completenessAndrenidae,completenessApidae,completenessColletidae,completenessHalictidae,completenessMegachilidae,completenessMelittidae)
completenessFamilies <- data.frame(Families, completenessFamiliesList) %>%
rename("Level of completeness (%)" = "completenessFamiliesList")
write.csv(completenessFamilies, "completenessFamilies.csv")
completenessGenus <- totalInformation %>%
group_by(GENUS) %>%
mutate(nbInfoGenus = n_distinct(VALID_NAME, source_file)) %>%
ungroup()
completenessGenus <- left_join(completenessGenus, nbSpcGen, by = "GENUS") %>%
mutate(completeGenus = nbSpc *20) %>%
mutate(completenessGenus = round(nbInfoGenus/completeGenus*100,2)) %>%
select(GENUS, completenessGenus) %>%
distinct() %>%
arrange(GENUS) %>%
filter(!is.na(GENUS)) %>%
rename("Genus" = "GENUS") %>%
rename("Level of completeness (%)" = "completenessGenus")
write.csv(completenessGenus, "completenessGenus.csv")
#radar chart for parasitic species only
parasiticOnly <- BeeFuncNestType %>%
filter(NEST_TYPE == "parasite") %>%
group_by(FAMILY) %>%
mutate(nbParasiticSpecies = n_distinct(VALID_NAME)) %>%
select(FAMILY, nbParasiticSpecies) %>%
distinct()
parasiteInfos <- BeeFuncParasitism %>%
group_by(FAMILY) %>%
mutate(nbReportedSpecies = n_distinct(VALID_NAME)) %>%
select(FAMILY, nbReportedSpecies) %>%
distinct()
radarChartParasitic <- parasiticOnly %>%
left_join(parasiteInfos, by="FAMILY") %>%
mutate(proportion=round(nbReportedSpecies/nbParasiticSpecies*100, 2)) %>%
select(FAMILY, proportion) %>%
pivot_wider(names_from = FAMILY, values_from = proportion) %>%
mutate(trait = "parasitismOnly") %>%
select(trait, Apidae, Halictidae, Megachilidae)
radarParasitismFamOnly <- ggradar(
radarChartParasitic,
values.radar = c("0", "50", "100"),
grid.min = 0, grid.mid = 50, grid.max = 100,
group.line.width = 1,
group.point.size = 3,
group.colours = "#27ae60",
background.circle.colour = "white",
fill=TRUE,
gridline.mid.colour = "grey",
axis.label.size=8)
#bibliographic references
### Extract all bibliographic sources from all files in the database
BeeFuncFiles <- list.files(pattern ="^BeeFunc.*\\.csv$", full.names = TRUE)
BeeFuncFiles <- list.files(pattern="^BeeFunc.*\\.csv$")
BeeFuncData <- lapply(BeeFuncFiles, read.csv2)
names(BeeFuncData) <- str_remove(basename(BeeFuncFiles), "\\.csv$")
list2env(BeeFuncData, envir = .GlobalEnv)
BeeFunc_all_sources <- BeeFuncFiles %>%
map_dfr(~ read.csv2(.x, colClasses = "character") %>%
select(SOURCE))
BeeFunc_all_sources <- as_tibble(BeeFunc_all_sources)
# create a vector with unique sources
BeeFunc_unique_sources <- BeeFunc_all_sources %>%
distinct()
write.csv2(BeeFunc_unique_sources, file="BeeFunc_unique_sources.csv")
# list sources from the literature
BeeFunc_all_litterature <- BeeFunc_all_sources %>%
filter(!str_detect(SOURCE, "Personnal communication"))
BeeFunc_unique_litterature <- BeeFunc_all_litterature %>%
distinct()
# list sources from experts
BeeFunc_all_experts <- BeeFunc_all_sources %>%
filter(str_detect(SOURCE, "Personnal communication")) %>%
filter(!str_detect(SOURCE, "Genoud, D. 2024. Personnal communication."))
BeeFunc_unique_experts <- BeeFunc_all_experts %>%
distinct()
# list the appearances of David Genoud's expert opinion
BeeFunc_all_DGe <- BeeFunc_all_sources %>%
filter(str_detect(SOURCE, "Genoud, D. 2024. Personnal communication."))
BeeFunc_unique_DGe <- BeeFunc_all_DGe %>%
distinct()
# create vectors
reference_type <- c("Total", "Scientific litterature", "Expert opinion", "Personnal communication")
number_of_trait_info <- c(nrow(BeeFunc_all_sources), nrow(BeeFunc_all_litterature), nrow(BeeFunc_all_DGe), nrow(BeeFunc_all_experts))
number_of_references <- c(nrow(BeeFunc_unique_sources), nrow(BeeFunc_unique_litterature), nrow(BeeFunc_unique_DGe), nrow(BeeFunc_unique_experts))
# create the summary table
BeeFunc_litterature_tab <- data.frame(reference_type, number_of_trait_info, number_of_references)
BeeFunc_litterature_tab <- BeeFunc_litterature_tab %>%
mutate(Proportion =round((number_of_trait_info/nrow(BeeFunc_all_sources))*100, 2)) %>%
rename("Reference type" ="reference_type") %>%
rename("Number of trait information" = "number_of_trait_info") %>%
rename("Number of references" = "number_of_references")
write.csv2(BeeFunc_litterature_tab, file="BeeFunc_litterature_tab.csv")
## Most frequently cited sources
citationRate <- BeeFunc_all_sources %>%
group_by(SOURCE) %>%
mutate(numberOfCitation = n()) %>%
ungroup() %>%
distinct()
write.csv(citationRate, "citationRate.csv")
